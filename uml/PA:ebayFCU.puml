@startuml
title ebayFCU批量提审
autonumber

actor "customer" as customer


box "poms_js_web" #lightYellow
participant "eBay FCU绑定" as t1
end box

box "poms_listing_nest" #lightGreen
participant "ebayFCU申请批量创建接口" as t2
participant "ebayFcu查重接口" as t6
participant "ebayFcuDetail状态更新接口" as t8
end box

box "product_operation_listing_management_nodejs_app" #lightBlue
participant "seller-configs" as t3
participant "product-skus" as t4
participant "product_base_infos" as t5
participant "sku_sale_status" as t7
end box

box "mongo"
participant "ebayFCU申请主从表" as db
end box

customer -> t1 : 进入页面
t1 -> t1 : 点击新增按钮，批量导入ebayFCU申请文件
t1 -> t1 : 判断【项目备注】【创建目的】【make】【model】【year】等所有字段都不能为空且不能超过20个字符
alt 字段为空或超过20个字符
t1 -> t1 : 记录错误信息
end
t1 -> t1 : 判断【目的仓库】【FCU类型】【fitType】必须为对应对应的选项
alt 字段内容不属于指定选项内
t1 -> t1 : 记录错误信息
end

t1 -> t3 : 获取上架账号sellerId对应的仓库
t3 --> t1 : 返回上架账号信息
alt 存在账号信息
t1 -> t1 : 判断账号和仓库是否一一对应
alt 账号和仓库不匹配
t1 -> t1 : 记录错误信息
end
else 不存在账号信息
t1 -> t1 : 记录错误信息
end

t1 -> t1 : 判断【skuId】和【fcu quantity】是否一一对应\n判断【skuId】格式是否正确\n判断【fcu quantity】是否有设置sku\n判断【sku+FCU类型+上架账号+fcu quantity】组合在xlsx文件是否重复
alt 不符合条件
t1 -> t1 : 记录错误信息
end
t1 -> t4 : 根据skuId查询product-sku资料
t4 --> t1 : 返回结果
alt skuId不存在
t1 -> t1 : 记录错误信息
end
t1 -> t5 : 根据skuId查询商家信息
t5 --> t1 : 返回结果
alt skuId不属于属于登录用户名所属商家
t1 -> t1 : 记录错误信息
end

t1 -> t6 : 根据【sku+FCU类型+上架账号+fcu quantity】组合去查询pa_ebay_fcu_apply_detail表是否有重复数据
t6 --> t1 : 返回【sku+FCU类型+上架账号+fcu quantity】组合的重复数据结果
group <color #red>优化部分
alt 存在重复数据
t1 -> t1 : 判断已存在的组合数据所在的批次状态
alt 批次状态不为"作废"或者"不通过"
t1 -> t1 : 判断fcuId字段是否存在
alt 存在fcuId
t1 -> t7 : 根据fcuId查询product禁售表,获取fcuId的禁售信息
t7 --> t1 : 返回结果
alt 存在禁售信息且禁售状态为T
t1 -> t8 : 更新fcuId所在批次的状态为作废
t8 -> db : 更新数据
db --> t8 : 返回结果
t8 --> t1 : 返回结果
end
else 不存在fcuId
t1 -> t1 : 记录错误信息,提示:该组合在xxx批次已重复
end
else 批次状态为"作废"或者"不通过"
t1 -> t1 : 跳过数据重复判断
end
end
end
t1 -> t1 : 判断导入的数据是否存在错误信息
alt 不存在错误信息
t1 -> t2 : 组合新的批次数据，调用ebayFCU申请批量创建接口
t2 -> db : 保存数据
db --> t2 : 返回结果
t2 --> t1 : 返回结果
t1 --> customer : 返回结果
else 存在错误信息
t1 --> customer : 导出错误信息给用户
end


@enduml